// Code generated by MockGen. DO NOT EDIT.
// Source: application/userApplication.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	reflect "reflect"

	entity "github.com/TulioGuaraldoB/car-app/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserApplication is a mock of IUserApplication interface.
type MockIUserApplication struct {
	ctrl     *gomock.Controller
	recorder *MockIUserApplicationMockRecorder
}

// MockIUserApplicationMockRecorder is the mock recorder for MockIUserApplication.
type MockIUserApplicationMockRecorder struct {
	mock *MockIUserApplication
}

// NewMockIUserApplication creates a new mock instance.
func NewMockIUserApplication(ctrl *gomock.Controller) *MockIUserApplication {
	mock := &MockIUserApplication{ctrl: ctrl}
	mock.recorder = &MockIUserApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserApplication) EXPECT() *MockIUserApplicationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserApplication) CreateUser(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserApplicationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserApplication)(nil).CreateUser), user)
}

// GetAllUsers mocks base method.
func (m *MockIUserApplication) GetAllUsers() ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIUserApplicationMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIUserApplication)(nil).GetAllUsers))
}

// GetUser mocks base method.
func (m *MockIUserApplication) GetUser(userId uint) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserApplicationMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserApplication)(nil).GetUser), userId)
}

// GetUserByCredentials mocks base method.
func (m *MockIUserApplication) GetUserByCredentials() (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCredentials")
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCredentials indicates an expected call of GetUserByCredentials.
func (mr *MockIUserApplicationMockRecorder) GetUserByCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCredentials", reflect.TypeOf((*MockIUserApplication)(nil).GetUserByCredentials))
}
