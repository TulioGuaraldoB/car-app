// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/carRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/TulioGuaraldoB/car-app/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockICarRepository is a mock of ICarRepository interface.
type MockICarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICarRepositoryMockRecorder
}

// MockICarRepositoryMockRecorder is the mock recorder for MockICarRepository.
type MockICarRepositoryMockRecorder struct {
	mock *MockICarRepository
}

// NewMockICarRepository creates a new mock instance.
func NewMockICarRepository(ctrl *gomock.Controller) *MockICarRepository {
	mock := &MockICarRepository{ctrl: ctrl}
	mock.recorder = &MockICarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICarRepository) EXPECT() *MockICarRepositoryMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockICarRepository) CreateCar(car *entity.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", car)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockICarRepositoryMockRecorder) CreateCar(car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockICarRepository)(nil).CreateCar), car)
}

// DeleteCar mocks base method.
func (m *MockICarRepository) DeleteCar(carId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", carId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockICarRepositoryMockRecorder) DeleteCar(carId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockICarRepository)(nil).DeleteCar), carId)
}

// GetAllCars mocks base method.
func (m *MockICarRepository) GetAllCars() ([]entity.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCars")
	ret0, _ := ret[0].([]entity.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCars indicates an expected call of GetAllCars.
func (mr *MockICarRepositoryMockRecorder) GetAllCars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCars", reflect.TypeOf((*MockICarRepository)(nil).GetAllCars))
}

// GetCarById mocks base method.
func (m *MockICarRepository) GetCarById(carId uint) (*entity.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarById", carId)
	ret0, _ := ret[0].(*entity.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarById indicates an expected call of GetCarById.
func (mr *MockICarRepositoryMockRecorder) GetCarById(carId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarById", reflect.TypeOf((*MockICarRepository)(nil).GetCarById), carId)
}

// GetCarByLicensePlate mocks base method.
func (m *MockICarRepository) GetCarByLicensePlate(licensePlate string) (*entity.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarByLicensePlate", licensePlate)
	ret0, _ := ret[0].(*entity.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarByLicensePlate indicates an expected call of GetCarByLicensePlate.
func (mr *MockICarRepositoryMockRecorder) GetCarByLicensePlate(licensePlate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarByLicensePlate", reflect.TypeOf((*MockICarRepository)(nil).GetCarByLicensePlate), licensePlate)
}

// GetCarsByBrand mocks base method.
func (m *MockICarRepository) GetCarsByBrand(brand string) ([]entity.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarsByBrand", brand)
	ret0, _ := ret[0].([]entity.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarsByBrand indicates an expected call of GetCarsByBrand.
func (mr *MockICarRepositoryMockRecorder) GetCarsByBrand(brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarsByBrand", reflect.TypeOf((*MockICarRepository)(nil).GetCarsByBrand), brand)
}
